# -*- coding: utf-8 -*-
"""DwAhmed.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GYC3mIO86ztYHr9K0aKAZnWlL16FspRQ
"""

# Assignment 1

import pandas as pd

df = pd.read_csv('/content/Kmeans_assignment_data.csv')

df

df.columns

df.info()

# Define a dictionary to map old column names to new column names
column_mapping = {
    'Roll No': 'roll_no',
    'Name': 'name',
    'Quiz1+Quiz2': 'quiz_total',
    'Ass1+Ass2': 'assignment_total',
    'Mid': 'mid_term',
    'Terminal': 'terminal_exam',
    'Obtained': 'obtained_marks'
}
# Rename columns in the dataset
df.rename(columns=column_mapping, inplace=True)



print("Column names updated and changes saved.")

df.columns

df

import sqlite3
import pandas as pd

# Function to create a connection to the SQLite database
def create_connection(db_file):
    try:
        conn = sqlite3.connect(db_file)
        return conn
    except sqlite3.Error as e:
        print(e)
    return None

# Function to create tables in the database
def create_tables(conn):
    cursor = conn.cursor()

    # Create Marks table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS marks (
            roll_no INTEGER PRIMARY KEY,
            name TEXT NOT NULL,
            quiz_total FLOAT,
            assignment_total FLOAT,
            mid_term FLOAT,
            terminal_exam FLOAT,
            obtained_marks FLOAT
        )
    ''')
    conn.commit()

# Function to load data from dataset into the Marks table
def load_marks_data(conn, dataset_file):
    cursor = conn.cursor()

    # Read dataset
    dataset = pd.read_excel('/content/Univeristy_Results.xls')

    # Check the column names
    print(dataset.columns)
    # Or you can print the first few rows to inspect the data
    print(dataset.head())

    # Extract relevant columns for marks table
    marks_data = dataset[['Roll No', 'Name', 'Quiz1+Quiz2', 'Ass1+Ass2', 'Mid', 'Terminal', 'Obtained']]

    conn.commit()


# Function to load sample data into the Patient_Medications table
def load_sample_patient_medications(conn):
    cursor = conn.cursor()

    # Sample data for Patient_Medications table
    cursor.execute("INSERT INTO Patient_Medications (patient_id, medication_id) VALUES (?, ?)",
                   (1, 1))  # Assigning Medication A to Patient 1
    cursor.execute("INSERT INTO Patient_Medications (patient_id, medication_id) VALUES (?, ?)",
                   (2, 2))  # Assigning Medication B to Patient 2

    conn.commit()

def main():
    database = "data_warehouse.db"
    dataset_file = "/content/Univeristy_Results.xls"  #   dataset

    # Create a database connection
    conn = create_connection(database)
    if conn is not None:
        # Create tables
        create_tables(conn)
        # Load data from dataset into Patients table
        load_marks_data(conn, dataset_file)
        print("Data warehouse created successfully.")
        conn.close()
    else:
        print("Error! Cannot create the database connection.")

if __name__ == '__main__':
    main()

import sqlite3

# Function to create a connection to the SQLite database
def create_connection(db_file):
    try:
        conn = sqlite3.connect(db_file)
        return conn
    except sqlite3.Error as e:
        print(e)
    return None

# Function to create tables in the database
def create_tables(conn):
    cursor = conn.cursor()

    # Create Assignment table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS Assignment (
            id INTEGER PRIMARY KEY,
            roll_no TEXT NOT NULL,
            name TEXT NOT NULL,
            ass1 REAL,
            ass2 REAL,
            UNIQUE(roll_no, name)
        )
    ''')

    # Create Quiz table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS Quiz (
            id INTEGER PRIMARY KEY,
            roll_no TEXT NOT NULL,
            name TEXT NOT NULL,
            quiz1 REAL,
            quiz2 REAL,
            UNIQUE(roll_no, name)
        )
    ''')

    # Create Total_Marks table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS Total_Marks (
            id INTEGER PRIMARY KEY,
            roll_no TEXT NOT NULL,
            name TEXT NOT NULL,
            mid REAL,
            terminal REAL,
            UNIQUE(roll_no, name)
        )
    ''')

    # Create Student_Record table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS Student_Record (
            id INTEGER PRIMARY KEY,
            roll_no TEXT NOT NULL,
            name TEXT NOT NULL,
            obtained REAL,
            UNIQUE(roll_no, name)
        )
    ''')

    # Create marks table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS marks (
            roll_no INTEGER PRIMARY KEY,
            name TEXT NOT NULL,
            quiz_total FLOAT,
            assignment_total FLOAT,
            mid_term FLOAT,
            terminal_exam FLOAT,
            obtained_marks FLOAT
        )
    ''')

    conn.commit()

def main():
    database = "data_warehouse.db"

    # Create a database connection
    conn = create_connection(database)
    if conn is not None:
        # Create tables
        create_tables(conn)
        print("Tables created successfully.")
        conn.close()
    else:
        print("Error! Cannot create the database connection.")

if __name__ == '__main__':
    main()

import sqlite3

# Function to create a connection to the SQLite database
def create_connection(db_file):
    try:
        conn = sqlite3.connect(db_file)
        return conn
    except sqlite3.Error as e:
        print(e)
    return None

# Function to display tables and their schemas
def display_tables_and_schema(conn):
    cursor = conn.cursor()

    # List all tables in the database
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = cursor.fetchall()
    print("Tables in the database:")
    for table in tables:
        table_name = table[0]
        print(f"\nSchema of the {table_name} table:")
        cursor.execute(f"PRAGMA table_info('{table_name}')")
        schema = cursor.fetchall()
        for column in schema:
            print(column)

def main():
    database = "data_warehouse.db"

    # Create a database connection
    conn = create_connection(database)
    if conn is not None:
        # Display tables and their schemas
        display_tables_and_schema(conn)
        conn.close()
    else:
        print("Error! Cannot create the database connection.")

if __name__ == '__main__':
    main()

import sqlite3
import pandas as pd
from tabulate import tabulate

# Function to create a connection to the SQLite database
def create_connection(db_file):
    try:
        conn = sqlite3.connect(db_file)
        return conn
    except sqlite3.Error as e:
        print(e)
    return None

def create_fact_table(conn):
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS Marks_Fact (
            roll_no TEXT,
            name TEXT,
            quiz_total FLOAT,
            assignment_total FLOAT,
            mid_term FLOAT,
            terminal_exam FLOAT,
            obtained_marks FLOAT,
            PRIMARY KEY (roll_no, name)
        )
    ''')

    conn.commit()

def populate_fact_table(conn, dataset_file):
    cursor = conn.cursor()

    # Read dataset
    marks_data = pd.read_excel(dataset_file)

    # Insert data into Marks_Fact table
    marks_data.to_sql('Marks_Fact', conn, if_exists='replace', index=False)

    conn.commit()

def display_fact_table(conn):
    cursor = conn.cursor()

    cursor.execute('''
        SELECT *
        FROM Marks_Fact
    ''')

    rows = cursor.fetchall()
    df = pd.DataFrame(rows, columns=['Roll No', 'Name', 'Quiz Total', 'Assignment Total', 'Mid Term', 'Terminal Exam', 'Obtained Marks'])
    print("Marks Fact Table:")
    print(tabulate(df.head(), headers='keys', tablefmt='pretty'))

def main():
    database = "data_warehouse.db"
    dataset_file = "/content/Univeristy_Results.xls"  # Update with your dataset file path

    # Create a database connection
    conn = create_connection(database)
    if conn is not None:
        # Create the Fact table
        create_fact_table(conn)
        # Populate the Fact table
        populate_fact_table(conn, dataset_file)
        # Display the Fact table
        display_fact_table(conn)
        conn.close()
    else:
        print("Error! Cannot create the database connection.")

if __name__ == '__main__':
    main()

