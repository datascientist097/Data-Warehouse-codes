# -*- coding: utf-8 -*-
"""DwSeher.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GYC3mIO86ztYHr9K0aKAZnWlL16FspRQ
"""

# Assignment 1

import pandas as pd

df = pd.read_csv('/content/Kmeans_assignment_data.csv')

df

df.columns

df.info()

df.columns

df

import sqlite3
import pandas as pd

# Function to create a connection to the SQLite database
def create_connection(db_file):
    try:
        conn = sqlite3.connect(db_file)
        return conn
    except sqlite3.Error as e:
        print(e)
    return None

# Function to create tables in the database
def create_tables(conn):
    cursor = conn.cursor()

    # Create University table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS University (
            Name TEXT NOT NULL,
            Private TEXT NOT NULL,
            Apps INTEGER NOT NULL,
            Accept INTEGER NOT NULL,
            Enroll INTEGER NOT NULL,
            Top10perc INTEGER NOT NULL,
            Top25perc INTEGER NOT NULL,
            F_Undergrad INTEGER NOT NULL,
            p_Undergrad INTEGER NOT NULL,
            Outstate INTEGER NOT NULL,
            Room_Board INTEGER NOT NULL,
            Books INTEGER NOT NULL,
            Personal INTEGER NOT NULL,
            PhD INTEGER NOT NULL,
            Terminal INTEGER NOT NULL,
            S_F_Ratio REAL NOT NULL,
            perc_alumni INTEGER NOT NULL,
            Expend INTEGER NOT NULL,
            Grad_Rate INTEGER NOT NULL
        )
    ''')
    conn.commit()

# Function to load data from dataset into the University table
def load_university_data(conn, dataset_file):
    cursor = conn.cursor()

    # Read dataset
    dataset = pd.read_csv('/content/Kmeans_assignment_data.csv')

    # Check the column names
    print(dataset.columns)
    # Or you can print the first few rows to inspect the data
    print(dataset.head())

    # Extract relevant columns for University table
    university_data = dataset[['Name', 'Private', 'Apps', 'Accept', 'Enroll', 'Top10perc', 'Top25perc',
                                'F_Undergrad', 'p_Undergrad', 'Outstate', 'Room_Board', 'Books',
                                'Personal', 'PhD', 'Terminal', 'S_F_Ratio', 'perc_alumni', 'Expend', 'Grad_Rate']]

    # Bulk insert university_data into University table
    cursor.executemany('''
        INSERT INTO University (Name, Private, Apps, Accept, Enroll, Top10perc, Top25perc,
                                F_Undergrad, p_Undergrad, Outstate, Room_Board, Books,
                                Personal, PhD, Terminal, S_F_Ratio, perc_alumni, Expend, Grad_Rate)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', university_data.values.tolist())

    conn.commit()

def main():
    database = "data_warehouse.db"
    dataset_file = "/content/Kmeans_assignment_data.csv"  #   dataset

    # Create a database connection
    conn = create_connection(database)
    if conn is not None:
        # Create tables
        create_tables(conn)
        # Load data from dataset into University table
        load_university_data(conn, dataset_file)
        print("Data warehouse created successfully.")
        conn.close()
    else:
        print("Error! Cannot create the database connection.")

if __name__ == '__main__':
    main()

import sqlite3

# Function to create a connection to the SQLite database
def create_connection(db_file):
    try:
        conn = sqlite3.connect(db_file)
        return conn
    except sqlite3.Error as e:
        print(e)
    return None

# Function to create tables in the database
def create_tables(conn):
    cursor = conn.cursor()

    # Create University table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS University (
            id INTEGER PRIMARY KEY,
            Name TEXT NOT NULL,
            Private TEXT NOT NULL,
            Apps INTEGER NOT NULL,
            Accept INTEGER NOT NULL,
            Enroll INTEGER NOT NULL,
            Top10perc INTEGER NOT NULL,
            Top25perc INTEGER NOT NULL,
            F_Undergrad INTEGER NOT NULL,
            p_Undergrad INTEGER NOT NULL,
            Outstate INTEGER NOT NULL,
            Room_Board INTEGER NOT NULL,
            Books INTEGER NOT NULL,
            Personal INTEGER NOT NULL,
            PhD INTEGER NOT NULL,
            Terminal INTEGER NOT NULL,
            S_F_Ratio REAL NOT NULL,
            perc_alumni INTEGER NOT NULL,
            Expend INTEGER NOT NULL,
            Grad_Rate INTEGER NOT NULL,
            UNIQUE(Name)
        )
    ''')

    conn.commit()

def main():
    database = "data_warehouse.db"

    # Create a database connection
    conn = create_connection(database)
    if conn is not None:
        # Create tables
        create_tables(conn)
        print("Table created successfully.")
        conn.close()
    else:
        print("Error! Cannot create the database connection.")

if __name__ == '__main__':
    main()

import sqlite3

# Function to create a connection to the SQLite database
def create_connection(db_file):
    try:
        conn = sqlite3.connect(db_file)
        return conn
    except sqlite3.Error as e:
        print(e)
    return None

# Function to display tables and their schemas
def display_tables_and_schema(conn):
    cursor = conn.cursor()

    # List all tables in the database
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = cursor.fetchall()
    print("Tables in the database:")
    for table in tables:
        table_name = table[0]
        print(f"\nSchema of the {table_name} table:")
        cursor.execute(f"PRAGMA table_info('{table_name}')")
        schema = cursor.fetchall()
        for column in schema:
            print(column)

def main():
    database = "data_warehouse.db"

    # Create a database connection
    conn = create_connection(database)
    if conn is not None:
        # Display tables and their schemas
        display_tables_and_schema(conn)
        conn.close()
    else:
        print("Error! Cannot create the database connection.")

if __name__ == '__main__':
    main()

import sqlite3
import pandas as pd
from tabulate import tabulate

# Function to create a connection to the SQLite database
def create_connection(db_file):
    try:
        conn = sqlite3.connect(db_file)
        return conn
    except sqlite3.Error as e:
        print(e)
    return None

def create_fact_table(conn):
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS University_Fact (
            name TEXT PRIMARY KEY,
            private TEXT,
            apps INTEGER,
            accept INTEGER,
            enroll INTEGER,
            top10perc INTEGER,
            top25perc INTEGER,
            f_undergrad INTEGER,
            p_undergrad INTEGER,
            outstate INTEGER,
            room_board INTEGER,
            books INTEGER,
            personal INTEGER,
            PhD INTEGER,
            terminal INTEGER,
            s_f_ratio REAL,
            perc_alumni INTEGER,
            expend INTEGER,
            grad_rate REAL
        )
    ''')

    conn.commit()

def populate_fact_table(conn, dataset_file):
    cursor = conn.cursor()

    # Read dataset
    university_data = pd.read_csv('/content/Kmeans_assignment_data.csv')

    # Extract relevant columns for University_Fact table
    university_data_subset = university_data[['Name', 'Private', 'Apps', 'Accept', 'Enroll', 'Top10perc', 'Top25perc',
                                              'F_Undergrad', 'p_Undergrad', 'Outstate', 'Room_Board', 'Books',
                                              'Personal', 'PhD', 'Terminal', 'S_F_Ratio', 'perc_alumni', 'Expend', 'Grad_Rate']]

    # Insert data into University_Fact table
    university_data_subset.to_sql('University_Fact', conn, if_exists='replace', index=False)

    conn.commit()

def display_fact_table(conn):
    cursor = conn.cursor()

    cursor.execute('''
        SELECT *
        FROM University_Fact
    ''')

    rows = cursor.fetchall()
    df = pd.DataFrame(rows, columns=['Name', 'Private', 'Applications', 'Accepted', 'Enrolled', 'Top 10%', 'Top 25%',
                                     'Full-time Undergraduates', 'Part-time Undergraduates', 'Out-of-state Tuition',
                                     'Room and Board', 'Books', 'Personal', 'PhD Students', 'Terminal Masters',
                                     'Student-Faculty Ratio', 'Percent Alumni Donating', 'Institutional Expenditure',
                                     'Graduation Rate'])
    print("University Fact Table:")
    print(tabulate(df.head(), headers='keys', tablefmt='pretty'))

def main():
    database = "data_warehouse.db"
    dataset_file = "/content/Kmeans_assignment_data.csv"  # Update with your dataset file path

    # Create a database connection
    conn = create_connection(database)
    if conn is not None:
        # Create the Fact table
        create_fact_table(conn)
        # Populate the Fact table
        populate_fact_table(conn, dataset_file)
        # Display the Fact table
        display_fact_table(conn)
        conn.close()
    else:
        print("Error! Cannot create the database connection.")

if __name__ == '__main__':
    main()

